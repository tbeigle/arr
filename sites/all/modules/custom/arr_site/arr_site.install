<?php
/**
 * @file
 * Install, update, and uninstall functions for the ARR site module.
 */

/**
 * Implementation of hook_install
 */
function arr_site_install() {
  drupal_set_message('The arr_site module was successfully installed');
}

/**
 * Implementation of hook_uninstall
 */
function arr_site_uninstall() {
  variable_del('arr_site_vendor_vocabulary');
  variable_del('arr_site_vendor_node_type');
  drupal_set_message('The arr_site module was successfully uninstalled');
}

/**
 * Implementation of hook_schema
 */
function arr_site_schema() {
  $schema['arr_spec_categories'] = array(
    'description' => 'The base table for technical specification categories.',
    'fields' => array(
      'spec_cat_id' => array(
        'description' => 'The primary identifier for a technical specification category.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ),
      'spec_category' => array(
        'description' => 'The name of this technical specification category.', 
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE, 
        'default' => '',
      ),
    ),
    'primary key' => array(
      'spec_cat_id',
    ),
  );
  
  $schema['arr_spec_cat_map'] = array(
    'description' => 'Maps spec categories to vendor taxonomy vocabulary terms.',
    'fields' => array(
      'tcid' => array(
        'description' => 'The primary identifier for this relationship.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ),
      'tid' => array(
        'description' => 'The taxonomy term identifier.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'spec_cat_id' => array(
        'description' => 'The category identifier.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'The sorting weight for this category.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array(
      'tcid',
    ),
  );
  
  $schema['arr_spec_map'] = array(
    'description' => 'Maps specs to instances of categories',
    'fields' => array(
      'tcsid' => array(
        'description' => 'The primary identifier for this relationship.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ),
      'tcid' => array(
        'description' => 'The terms_categories identifier, used to track the instantiation of this spec.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'spec_id' => array(
        'description' => 'The primary identifier for the tech spec.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'weight' => array(
        'description' => 'The sorting weight for this tech spec.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'points_yes' => array(
        'description' => 'The number of points to add/subtract if the value is yes.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 1,
      ),
      'points_no' => array(
        'description' => 'The number of points to add/subtract if the value is no.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array(
      'tcsid',
    ),
  );
  
  $schema['arr_spec_cat_vendor_rating'] = array(
    'description' => 'This table contains per-category ratings for vendors.',
    'fields' => array(
      'spec_cat_id' => array(
        'description' => 'The tech spec category identifier.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The vendor node identifier.', 
        'type' => 'int', 
        'not null' => TRUE, 
        'default' => 0,
      ),
      'rating' => array(
        'description' => 'The rating for the vendor in this category',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'unique keys' => array(
      'nid_scid' => array('nid', 'spec_cat_id'),
    ),
  );
  
  $schema['arr_specs'] = array(
    'description' => 'The base table for vendor technical specifications.', 
    'fields' => array(
      'spec_id' => array(
        'description' => 'The primary identifier for a technical specification.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ),
      'spec' => array(
        'description' => 'The title of this technical specification.', 
        'type' => 'varchar', 
        'length' => 255, 
        'not null' => TRUE, 
        'default' => '',
      ),
    ),
    'primary key' => array(
      'spec_id',
    ),
  );
  
  $schema['arr_spec_vendors'] = array(
    'description' => 'This table stores relationship data for tech specs and vendor nodes',
    'fields' => array(
      'v_spec_id' => array(
        'description' => 'The primary identifier for a technical specification to vendor node relationship.', 
        'type' => 'serial', 
        'unsigned' => TRUE, 
        'not null' => TRUE,
      ),
      'spec_id' => array(
        'description' => 'The tech spec identifier.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'nid' => array(
        'description' => 'The vendor node identifier.', 
        'type' => 'int', 
        'not null' => TRUE, 
        'default' => 0,
      ),
      'has_spec' => array(
        'description' => '1 means the vendor has the spec while 0 means the vendor does not have the spec.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'spec_comment' => array(
        'description' => 'The vendor-specific comment for this technical specification.',
        'type' => 'text',
      ),
    ),
    'primary key' => array(
      'v_spec_id',
    ),
  );
  
  return $schema;
}

/**
 * Update to add the weight column to the tech specs table
 */
function arr_site_update_7100() {
  if (!db_field_exists('arr_specs', 'weight')) {
    $spec = array(
      'description' => 'The sorting weight for this tech spec.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    );
    
    db_add_field('arr_specs', 'weight', $spec);
  }
}

/**
 * Update to add the points_yes and points_no columns to the tech specs table
 */
function arr_site_update_7101() {
  if (!db_field_exists('arr_specs', 'points_yes')) {
    $spec = array(
      'description' => 'The number of points to add/subtract if the value is yes.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 1,
    );
    
    db_add_field('arr_specs', 'points_yes', $spec);
  }
  
  if (!db_field_exists('arr_specs', 'points_no')) {
    $spec = array(
      'description' => 'The number of points to add/subtract if the value is no.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    );
    
    db_add_field('arr_specs', 'points_no', $spec);
  }
}

/**
 * Adds two new tables, ports over data, and deletes old fields to make spec categories and specs reusable amongst different taxonomy terms.
 */
function arr_site_update_7102() {
  // Install the new schemas
  $new_tables = array(
    'arr_spec_cat_map',
    'arr_spec_map',
  );
  
  $schema = array();
  
  foreach ($new_tables as $table) {
    if (!db_table_exists($table)) {
      if (empty($schema[$table])) {
        $schema = arr_site_schema();
      }
      
      if (!empty($schema[$table])) {
        db_create_table($table, $schema[$table]);
      }
    }
  }
  
  if (db_table_exists('arr_spec_cat_map') && db_table_exists('arr_spec_map')) {
    _arr_site_7102_map_data();
    
    // Update the old tables - delete unnecessary columns
    $delete_fields = array(
      'arr_spec_categories' => array(
        'tid',
        'weight',
      ),
      'arr_specs' => array(
        'spec_cat_id',
        'weight',
        'points_yes',
        'points_no',
      ),
    );
    
    foreach ($delete_fields as $table => $fields) {
      foreach ($fields as $field) {
        db_drop_field($table, $field);
      }
    }
  }
}

/**
 * Helper function to perform inserts
 */
function _arr_site_7102_map_data() {
  $categories = $specs = array();
  
  // Map categories
  $sql =
    'SELECT * ' .
    'FROM {arr_spec_categories};';
  $result = db_query($sql);
  
  foreach ($result as $row) {
    $categories[] = $row;
  }
  
  foreach ($categories as $cat) {
    $tcid = db_insert('arr_spec_cat_map')
      ->fields(array(
        'tid' => $cat->tid,
        'spec_cat_id' => $cat->spec_cat_id,
        'weight' => $cat->weight,
      ))
      ->execute();
  }
  
  // Map specs
  $unmapped = array();
  
  $sql =
    'SELECT ' .
      's.`spec_id` AS `spec_id`, ' .
      's.`weight` AS `weight`, ' .
      's.`points_yes` AS `points_yes`, ' .
      's.`points_no` AS `points_no`, ' .
      'c.`tcid` AS `tcid` ' .
    'FROM {arr_specs} s ' .
      'LEFT JOIN {arr_spec_cat_map} c ' .
        'ON s.`spec_cat_id` = c.`spec_cat_id`;';
  $result = db_query($sql);
  
  foreach ($result as $row) {
    if (!empty($row->tcid)) {
      $specs[] = $row;
    }
    // If no tcid exists then this is an orphaned spec and should be deleted
    else {
      $unmapped[] = $row->spec_id;
    }
  }
  
  if (!empty($unmapped)) {
    foreach ($unmapped as $spec_id) {
      $num_deleted = db_delete('arr_specs')
        ->condition('spec_id', $spec_id)
        ->execute();
    }
  }
  
  foreach ($specs as $spec) {
    $tcsid = db_insert('arr_spec_map')
      ->fields(array(
        'tcid' => $spec->tcid,
        'spec_id' => $spec->spec_id,
        'weight' => $spec->weight,
        'points_yes' => $spec->points_yes,
        'points_no' => $spec->points_no,
      ))
      ->execute();
  }
}
